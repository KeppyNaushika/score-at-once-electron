// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") // 例: file:./grading_app.sqlite
}

// ---------------------------------------------------
// ユーザー・組織管理
// ---------------------------------------------------

model User {
  id                String          @id @default(uuid())
  username          String          @unique
  passwordHash      String?
  name              String
  role              String          @default("teacher")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  // リレーション
  classesTaught     Class[]         @relation("ClassTeachers")
  scoreRecords      ScoreRecord[]   // ScoreRecord が Project に関連するように変更するなら、ここも影響受ける可能性
  examSessions      ExamSession[]   // ExamSession が Project に関連するように変更するなら、ここも影響受ける可能性
  questionScores    QuestionScore[] // Userが採点した設問スコア
  createdTemplates  ExamTemplate[]
  locks             Lock[]
  projects          Project[]       @relation("UserProjects")
}

model Class {
  id          String    @id @default(uuid())
  name        String    @unique
  grade       Int?      // 学年
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // リレーション
  students    Student[]
  teachers    User[]    @relation("ClassTeachers") // Corrected: Removed fields and teacherIds, uses relation name
  // teacherIds  String[] // Removed: SQLite does not support primitive lists this way for relations

  @@map("classes") // テーブル名を 'classes' に
}

// ---------------------------------------------------
// 生徒情報
// ---------------------------------------------------

model Student {
  id           String        @id @default(uuid())
  studentId    String        @unique // 学籍番号など
  name         String
  classId      String
  class        Class         @relation(fields: [classId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  // リレーション
  answerSheets AnswerSheet[] // 生徒が提出した回答用紙
  scoreRecords ScoreRecord[]
}

// ---------------------------------------------------
// 試験・設問・模範解答・テンプレート
// ---------------------------------------------------

// Exam モデルは Project に移行したため、完全に削除またはコメントアウト
// model Exam { ... }

// 模範解答の画像パス (複数ページ対応)
model MasterImage {
  id         String   @id @default(uuid())
  // examId     String // 旧: Examへの関連
  // exam       Exam     @relation(fields: [examId], references: [id]) // 旧: Examへの関連
  projectId  String   // 新: Projectへの関連
  project    Project  @relation(fields: [projectId], references: [projectId]) // 新: Projectへの関連
  path       String
  pageNumber Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([projectId, pageNumber]) // Project内でページ番号はユニーク
}

model Question {
  id             String          @id @default(uuid())
  // examId         String // 旧 Exam への参照
  // exam           Exam            @relation(fields: [examId], references: [id]) // 旧 Exam への参照
  projectId      String          // 新 Project への参照
  project        Project         @relation(fields: [projectId], references: [projectId]) // 新 Project への参照
  questionNumber Int
  points         Float
  questionType   String
  correctAnswer  String?
  answerArea     String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  questionScores QuestionScore[]
}

// 試験のテンプレート (採点領域の定義セット)
// 複数の教員が共通のテンプレートを使えるようにするため、Examとは別に定義
model ExamTemplate {
  id                String   @id @default(uuid())
  name              String
  description       String?
  // examId            String?  // 旧: Examへの関連
  // exam              Exam?    @relation(fields: [examId], references: [id]) // 旧: Examへの関連
  projectId         String?  // 新: Projectへの関連
  project           Project? @relation(fields: [projectId], references: [projectId]) // 新: Projectへの関連
  templateData      Json
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         User     @relation(fields: [createdById], references: [id])
  createdById       String
  scoreDisplayAreas Json?
}

// ---------------------------------------------------
// 生徒の回答と採点結果
// ---------------------------------------------------

model AnswerSheet {
  id                 String          @id @default(uuid())
  // examId             String // 旧 Exam への参照
  // exam               Exam            @relation(fields: [examId], references: [id]) // 旧 Exam への参照
  projectId          String          // 新 Project への参照
  project            Project         @relation(fields: [projectId], references: [projectId]) // 新 Project への参照
  studentId          String?
  student            Student?        @relation(fields: [studentId], references: [id])
  pageNumber         Int
  originalImagePath  String
  processedImagePath String?
  scoredPdfPath      String?
  isScored           Boolean         @default(false)
  totalScore         Float?
  isAbsent           Boolean         @default(false)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  version            Int             @default(1)
  questionScores     QuestionScore[]
  // examSessionId      String? // ExamSession が Project に関連するなら、ここも影響

  // projectId と studentId と pageNumber でユニークにする
  @@unique([projectId, studentId, pageNumber])
}

// 設問ごとの採点結果 (複数教員対応)
model QuestionScore {
  id             String      @id @default(uuid())
  answerSheetId  String
  answerSheet    AnswerSheet @relation(fields: [answerSheetId], references: [id])
  questionId     String
  question       Question    @relation(fields: [questionId], references: [id])
  score          Float?      // 設問ごとの得点
  detectedAnswer String?     // 生徒が認識された回答（OCR結果など）
  isCorrect      Boolean?    // 正誤
  comment        String?     // 採点時のコメント

  scoredByUserId String      // 採点を行った教員のID
  scoredByUser   User        @relation(fields: [scoredByUserId], references: [id])

  status         String      @default("proposed") // "proposed", "final", "disputed", "needs_review"
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  scoreVersion   Int         @default(1) // 楽観的ロック用バージョン

  // 各教員が同じ答案の同じ設問を複数回採点できないようにする（再採点時は更新）
  @@unique([answerSheetId, questionId, scoredByUserId])
  // 【重要】一つの答案の、ある設問に対して、"final"なスコアは厳密に一つしか存在できないようにする。
  // statusが"final"のレコードに対してのみ適用され、scoredByUserIdに関わらずユニーク性を強制する。
  // @@unique([answerSheetId, questionId, status], name: "unique_final_score", where: { status: "final" })
  // Prismaのwhere句でのフィルタリングはプレビュー機能のため、コメントアウト。アプリケーション側で制御するか、DBレベルの制約を検討。
  // 代わりに、複合インデックスを作成し、アプリケーションロジックで一意性を保証することを推奨します。
  @@index([answerSheetId, questionId, status])
}

// 生徒ごとの最終的な試験スコアレコード (統合後の結果)
model ScoreRecord {
  id                String   @id @default(uuid())
  studentId         String
  student           Student  @relation(fields: [studentId], references: [id])
  // examId            String // 旧 Exam への参照
  // exam              Exam     @relation(fields: [examId], references: [id]) // 旧 Exam への参照
  projectId         String   // 新 Project への参照
  project           Project  @relation(fields: [projectId], references: [projectId]) // 新 Project への参照
  totalScore        Float
  excelOutputPath   String?
  pdfOutputPath     String?
  finalizedByUserId String?
  finalizedByUser   User?    @relation(fields: [finalizedByUserId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([studentId, projectId]) // projectId に変更
}

// ---------------------------------------------------
// 複数教員での同時採点（簡易的な排他制御）
// ---------------------------------------------------

// 採点セッション管理（誰がいつ採点を開始したか、そのPCの識別子など）
model ExamSession {
  id                    String        @id @default(uuid())
  // examId                String // 旧 Exam への参照
  // exam                  Exam          @relation(fields: [examId], references: [id]) // 旧 Exam への参照
  projectId             String        // 新 Project への参照
  project               Project       @relation(fields: [projectId], references: [projectId]) // 新 Project への参照
  userId                String
  user                  User          @relation(fields: [userId], references: [id])
  machineIdentifier     String?
  sessionStartedAt      DateTime      @default(now())
  sessionEndedAt        DateTime?
  // processedAnswerSheets AnswerSheet[] // AnswerSheet.examSessionId があれば不要
}

// 共有ロックテーブル（簡易的な排他制御のため）
// 例えば、特定のAnswerSheetIdをロックしたい場合に利用
// 主に、クリティカルなDB操作（マイグレーションなど）の排他制御に利用する可能性を考慮。
// 採点ロジックの排他制御は楽観的ロックで行う。
model Lock {
  id               String    @id @default(uuid())
  lockedResourceId String    @unique // ロック対象のリソースID (例: AnswerSheetId)
  resourceType     String    // ロック対象のリソースタイプ (例: "AnswerSheet")
  lockedByUserId   String
  lockedByUser     User      @relation(fields: [lockedByUserId], references: [id])
  lockedAt         DateTime  @default(now())
  expiresAt        DateTime? // ロックの有効期限（自動解除用）

  @@index([lockedResourceId, resourceType])
  @@map("locks") // テーブル名を 'locks' に
}

// プロジェクト管理モデル
model Project {
  projectId   String    @id @default(uuid())
  examName    String
  examDate    DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tags        Tag[]     @relation("ProjectTags")

  userId      String?
  user        User?     @relation("UserProjects", fields: [userId], references: [id])

  masterImages MasterImage[]
  templates    ExamTemplate[]

  // Project に関連する他のモデル (旧 Exam から移行)
  questions     Question[]
  answerSheets  AnswerSheet[]
  scoreRecords  ScoreRecord[]
  examSessions  ExamSession[]
  // scorers       User[]        @relation("ProjectScorers") // 必要であれば
}

model Tag {
  id        String    @id @default(uuid())
  text      String    @unique
  projects  Project[] @relation("ProjectTags")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
