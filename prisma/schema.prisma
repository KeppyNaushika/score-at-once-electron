generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") // 例: file:./grading_app.sqlite
}

// ---------------------------------------------------
// ユーザー・組織管理
// ---------------------------------------------------

model User {
  id                    String          @id @default(uuid())
  username              String          @unique
  passwordHash          String?
  name                  String
  role                  String          @default("teacher")
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  // リレーション
  classesTaught         Class[]         @relation("ClassTeachers")
  scoreRecords          ScoreRecord[]
  examSessions          ExamSession[]
  questionScores        QuestionScore[]
  createdProjectLayouts ProjectLayout[]
  locks                 Lock[]
  projects              Project[]       @relation("UserProjects")
}

model Class {
  id          String    @id @default(uuid())
  name        String    @unique
  grade       Int? // 学年
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // リレーション
  students    Student[]
  teachers    User[]    @relation("ClassTeachers")

  @@map("classes")
}

// ---------------------------------------------------
// 生徒情報
// ---------------------------------------------------

model Student {
  id        String   @id @default(uuid())
  studentId String   @unique
  name      String
  classId   String
  class     Class    @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answerSheets AnswerSheet[]
  scoreRecords ScoreRecord[]
}

// ---------------------------------------------------
// 試験・設問・模範解答・テンプレート
// ---------------------------------------------------

// 模範解答の画像パス (複数ページ対応)
model MasterImage {
  id         String   @id @default(uuid())
  projectId  String
  path       String // userDataからの相対パス
  pageNumber Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  project       Project        @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  layoutRegions LayoutRegion[]

  @@unique([projectId, pageNumber])
  @@index([projectId])
}

model Question {
  id             String          @id @default(uuid())
  projectId      String
  project        Project         @relation(fields: [projectId], references: [projectId])
  questionNumber Int
  points         Float
  questionType   String
  correctAnswer  String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  questionScores QuestionScore[]
  layoutRegions  LayoutRegion[]
}

// ---------------------------------------------------
// Project (試験) 管理
// ---------------------------------------------------
model Project {
  projectId   String    @id @default(uuid())
  examName    String
  description String?
  examDate    DateTime?
  userId      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // リレーション
  user         User?          @relation("UserProjects", fields: [userId], references: [id], onDelete: Cascade)
  tags         Tag[]          @relation("ProjectTags")
  masterImages MasterImage[]
  layout       ProjectLayout?
  Question     Question[]
  AnswerSheet  AnswerSheet[]
  ScoreRecord  ScoreRecord[]
  ExamSession  ExamSession[]

  @@index([userId])
}

// ---------------------------------------------------
// ProjectLayout
// ---------------------------------------------------
model ProjectLayout {
  id          String   @id @default(uuid())
  projectId   String   @unique
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project   Project        @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  createdBy User           @relation(fields: [createdById], references: [id], onDelete: Restrict)
  areas     LayoutRegion[]

  @@index([projectId])
  @@index([createdById])
}

model LayoutRegion {
  id                        String   @id @default(uuid())
  projectLayoutId           String
  masterImageId             String
  type                      AreaType
  x                         Float
  y                         Float
  width                     Float
  height                    Float
  label                     String?
  points                    Float?
  questionNumber            String?
  sourceAreaIdsJson         String?
  sourceQuestionNumbersJson String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  projectLayout ProjectLayout @relation(fields: [projectLayoutId], references: [id], onDelete: Cascade)
  masterImage   MasterImage   @relation(fields: [masterImageId], references: [id], onDelete: Cascade)
  Question      Question?     @relation(fields: [questionId], references: [id])
  questionId    String?

  @@index([projectLayoutId])
  @@index([masterImageId])
}

enum AreaType {
  QUESTION_ANSWER
  STUDENT_NAME
  STUDENT_ID
  TOTAL_SCORE
  SUBTOTAL_SCORE
  MARK
  COMMENT
  OTHER
}

// ---------------------------------------------------
// 生徒の回答と採点結果
// ---------------------------------------------------

model AnswerSheet {
  id                 String          @id @default(uuid())
  projectId          String
  project            Project         @relation(fields: [projectId], references: [projectId])
  studentId          String?
  student            Student?        @relation(fields: [studentId], references: [id])
  pageNumber         Int
  originalImagePath  String
  processedImagePath String?
  scoredPdfPath      String?
  isScored           Boolean         @default(false)
  totalScore         Float?
  isAbsent           Boolean         @default(false)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  version            Int             @default(1)
  questionScores     QuestionScore[]

  @@unique([projectId, studentId, pageNumber])
}

// 設問ごとの採点結果 (複数教員対応)
model QuestionScore {
  id             String      @id @default(uuid())
  answerSheetId  String
  answerSheet    AnswerSheet @relation(fields: [answerSheetId], references: [id])
  questionId     String
  question       Question    @relation(fields: [questionId], references: [id])
  score          Float?
  detectedAnswer String?
  isCorrect      Boolean?
  comment        String?

  scoredByUserId String
  scoredByUser   User   @relation(fields: [scoredByUserId], references: [id])

  status       String   @default("proposed")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  scoreVersion Int      @default(1)

  // 各教員が同じ答案の同じ設問を複数回採点できないようにする（再採点時は更新）
  @@unique([answerSheetId, questionId, scoredByUserId])
  // 【重要】一つの答案の、ある設問に対して、"final"なスコアは厳密に一つしか存在できないようにする。
  // statusが"final"のレコードに対してのみ適用され、scoredByUserIdに関わらずユニーク性を強制する。
  // @@unique([answerSheetId, questionId, status], name: "unique_final_score", where: { status: "final" })
  // Prismaのwhere句でのフィルタリングはプレビュー機能のため、コメントアウト。アプリケーション側で制御するか、DBレベルの制約を検討。
  // 代わりに、複合インデックスを作成し、アプリケーションロジックで一意性を保証することを推奨します。
  @@index([answerSheetId, questionId, status])
}

// 生徒ごとの最終的な試験スコアレコード (統合後の結果)
model ScoreRecord {
  id                String   @id @default(uuid())
  studentId         String
  student           Student  @relation(fields: [studentId], references: [id])
  projectId         String
  project           Project  @relation(fields: [projectId], references: [projectId])
  totalScore        Float
  excelOutputPath   String?
  pdfOutputPath     String?
  finalizedByUserId String?
  finalizedByUser   User?    @relation(fields: [finalizedByUserId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([studentId, projectId])
}

// ---------------------------------------------------
// 複数教員での同時採点（簡易的な排他制御）
// ---------------------------------------------------

// 採点セッション管理（誰がいつ採点を開始したか、そのPCの識別子など）
model ExamSession {
  id                String    @id @default(uuid())
  projectId         String
  project           Project   @relation(fields: [projectId], references: [projectId])
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  machineIdentifier String?
  sessionStartedAt  DateTime  @default(now())
  sessionEndedAt    DateTime?
}

// 共有ロックテーブル（簡易的な排他制御のため）
// 例えば、特定のAnswerSheetIdをロックしたい場合に利用
// 主に、クリティカルなDB操作（マイグレーションなど）の排他制御に利用する可能性を考慮。
// 採点ロジックの排他制御は楽観的ロックで行う。
model Lock {
  id               String    @id @default(uuid())
  lockedResourceId String    @unique
  resourceType     String
  lockedByUserId   String
  lockedByUser     User      @relation(fields: [lockedByUserId], references: [id])
  lockedAt         DateTime  @default(now())
  expiresAt        DateTime?

  @@index([lockedResourceId, resourceType])
  @@map("locks")
}

model Tag {
  id        String    @id @default(uuid())
  text      String    @unique
  projects  Project[] @relation("ProjectTags")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
