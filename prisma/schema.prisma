generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") // 例: file:./grading_app.sqlite
}

// ---------------------------------------------------
// ユーザー・組織管理
// ---------------------------------------------------

model User {
  id               String              @id @default(uuid())
  username         String              @unique
  passwordHash     String?
  name             String
  role             String              @default("teacher")
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  // リレーション
  classesTaught    Class[]             @relation("ClassTeachers")
  scoreRecords     ScoreRecord[]
  questionScores   QuestionScore[]
  locks            Lock[]
  createdProjects  Project[]           @relation("UserProjects")
  assignedProjects GradingAssignment[]
  examSessions     ProjectSession[]
}

model Class {
  id          String    @id @default(uuid())
  name        String    @unique
  grade       Int?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  students    Student[]
  teachers    User[]    @relation("ClassTeachers")

  @@map("classes")
}

// ---------------------------------------------------
// 生徒情報
// ---------------------------------------------------

model Student {
  id        String   @id @default(uuid())
  studentId String   @unique
  name      String
  classId   String
  class     Class    @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answerSheets AnswerSheet[]
  scoreRecords ScoreRecord[]
}

// ---------------------------------------------------
// 試験・設問・模範解答・採点枠
// ---------------------------------------------------

// 模範解答の画像パス (複数ページ対応)
model MasterImage {
  id         String   @id @default(uuid())
  projectId  String
  path       String
  pageNumber Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  layoutRegions LayoutRegion[]

  @@unique([projectId, pageNumber])
  @@index([projectId])
}

// Projectモデル (旧Examモデル)
model Project {
  id          String    @id @default(cuid())
  examName    String
  examDate    DateTime?
  subject     String?
  description String?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // リレーション
  user               User                @relation("UserProjects", fields: [userId], references: [id])
  masterImages       MasterImage[]
  answerSheets       AnswerSheet[]
  scoreRecords       ScoreRecord[]
  projectSessions    ProjectSession[]
  layoutRegions      LayoutRegion[]
  gradingAssignments GradingAssignment[]
  questionGroups     QuestionGroup[]

  @@index([userId])
}

// プロジェクトと採点担当者の多対多リレーション
model GradingAssignment {
  projectId  String
  userId     String
  assignedAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([projectId, userId])
  @@index([userId])
}

model LayoutRegion {
  id            String       @id @default(cuid())
  projectId     String
  project       Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  masterImageId String?
  masterImage   MasterImage? @relation(fields: [masterImageId], references: [id])

  label String
  type  AreaType

  // 位置とサイズ (画像全体に対する割合, 0.0 ~ 1.0)
  x      Float
  y      Float
  width  Float
  height Float

  // QUESTION_ANSWER の場合
  questionNumber String? // 例: "1", "2a", "3"
  points         Int? // 配点

  // SUBTOTAL_SCORE または TOTAL_SCORE の場合
  subtotalDefinitions SubtotalDefinition[]

  // QUESTION_ANSWER の場合、どの QuestionGroupItem に属するか
  questionSubtotalAssignments QuestionSubtotalAssignment[]
  questionScores              QuestionScore[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([masterImageId])
}

// New Model: 設問グループのカテゴリ (例: "大問", "観点別評価")
model QuestionGroup {
  id        String              @id @default(cuid())
  name      String
  projectId String
  project   Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  items     QuestionGroupItem[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([projectId, name])
  @@index([projectId])
}

// New Model: 設問グループの具体的な項目 (例: "大問1", "知識・技能")
model QuestionGroupItem {
  id              String        @id @default(cuid())
  name            String
  questionGroupId String
  questionGroup   QuestionGroup @relation(fields: [questionGroupId], references: [id], onDelete: Cascade)

  // この項目を集計対象とする小計/合計定義
  subtotalDefinitions SubtotalDefinition[]

  // この項目に割り当てられている設問
  questionAssignments QuestionSubtotalAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([questionGroupId, name])
  @@index([questionGroupId])
}

// New Model: 小計/合計表示エリアがどの QuestionGroupItem を集計するかを定義
model SubtotalDefinition {
  id                  String            @id @default(cuid())
  layoutRegionId      String
  layoutRegion        LayoutRegion      @relation(fields: [layoutRegionId], references: [id], onDelete: Cascade)
  questionGroupItemId String
  questionGroupItem   QuestionGroupItem @relation(fields: [questionGroupItemId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([layoutRegionId, questionGroupItemId])
  @@index([layoutRegionId])
  @@index([questionGroupItemId])
}

// New Model: 設問エリアがどの QuestionGroupItem に属するかを定義する中間テーブル
model QuestionSubtotalAssignment {
  id                     String            @id @default(cuid())
  questionLayoutRegionId String
  questionLayoutRegion   LayoutRegion      @relation(fields: [questionLayoutRegionId], references: [id], onDelete: Cascade)
  questionGroupItemId    String
  questionGroupItem      QuestionGroupItem @relation(fields: [questionGroupItemId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([questionLayoutRegionId, questionGroupItemId])
  @@index([questionLayoutRegionId])
  @@index([questionGroupItemId])
}

enum AreaType {
  QUESTION_ANSWER
  STUDENT_NAME
  STUDENT_ID
  TOTAL_SCORE
  SUBTOTAL_SCORE
  MARK
  COMMENT
  OTHER
}

// ---------------------------------------------------
// 生徒の回答と採点結果
// ---------------------------------------------------

model AnswerSheet {
  id                 String          @id @default(uuid())
  projectId          String
  project            Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  studentId          String?
  student            Student?        @relation(fields: [studentId], references: [id])
  pageNumber         Int
  originalImagePath  String
  processedImagePath String?
  scoredPdfPath      String?
  isScored           Boolean         @default(false)
  totalScore         Float?
  isAbsent           Boolean         @default(false)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  version            Int             @default(1)
  questionScores     QuestionScore[]

  @@unique([projectId, studentId, pageNumber])
  @@index([projectId])
}

// 設問ごとの採点結果 (複数教員対応)
model QuestionScore {
  id             String       @id @default(uuid())
  answerSheetId  String
  answerSheet    AnswerSheet  @relation(fields: [answerSheetId], references: [id], onDelete: Cascade)
  layoutRegionId String
  layoutRegion   LayoutRegion @relation(fields: [layoutRegionId], references: [id], onDelete: Cascade)

  score          Float?
  detectedAnswer String?
  isCorrect      Boolean?
  comment        String?

  scoredByUserId String
  scoredByUser   User   @relation(fields: [scoredByUserId], references: [id])

  status       String   @default("proposed")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  scoreVersion Int      @default(1)

  @@unique([answerSheetId, layoutRegionId, scoredByUserId])
  @@index([answerSheetId, layoutRegionId, status])
  @@index([layoutRegionId])
}

// 生徒ごとの最終的な試験スコアレコード (統合後の結果)
model ScoreRecord {
  id                String   @id @default(uuid())
  studentId         String
  student           Student  @relation(fields: [studentId], references: [id])
  projectId         String
  project           Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  totalScore        Float
  excelOutputPath   String?
  pdfOutputPath     String?
  finalizedByUserId String?
  finalizedByUser   User?    @relation(fields: [finalizedByUserId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([studentId, projectId])
  @@index([projectId])
}

// 採点セッション管理 (旧 ExamSession)
model ProjectSession {
  id                String    @id @default(uuid())
  projectId         String
  project           Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  machineIdentifier String?
  sessionStartedAt  DateTime  @default(now())
  sessionEndedAt    DateTime?

  @@index([projectId])
  @@index([userId])
}

// 共有ロックテーブル（簡易的な排他制御のため）
model Lock {
  id               String    @id @default(uuid())
  lockedResourceId String    @unique
  resourceType     String
  lockedByUserId   String
  lockedByUser     User      @relation(fields: [lockedByUserId], references: [id])
  lockedAt         DateTime  @default(now())
  expiresAt        DateTime?

  @@index([lockedResourceId, resourceType])
  @@map("locks")
}
